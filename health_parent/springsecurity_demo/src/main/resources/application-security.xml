<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd">
    <!--
    【重要】【重要】【重要】
    这里面的所有路径必须以/开头，否则启动报错
    -->

    <!--  auto-config: 自动配置，自动生成login页面，login处理，退出处理
            use-expressions: 是否使用spel表达式 true: access的值可以填表达式(hasRole, hasAuthority, hasAny....)
                             false: ROEL_角色名(必须是ROLE_打，否则启动报错), 或 security写死的几个常量
     -->
    <security:http security="none" pattern="/js/**"/>
    <security:http security="none" pattern="/css/**"/>
    <security:http security="none" pattern="/login.html"/>
    <!--  拦截规则配置  -->
    <security:http auto-config="true" use-expressions="false">
        <security:intercept-url pattern="/**" access="ROLE_ADMIN"/>
        <!--   登陆配置 form-login
            login-page: 登陆页面
            username-parameter: 前端传过来的用户名的参数名
            password-parameter: 前端传过来的密码的参数名
            login-processing-url: 处理登陆请求的url
            default-target-url: 登陆成功后默认跳转的页面, success.html -> login.html->success.html
            always-use-default-target: true不管是从哪个页面转到login.html，登陆后都跑到default-target-url
             success.html -> login.html-> index.html
            authentication-failure-url: 登陆失败后跳转的页面
        -->
        <security:form-login
                login-page="/login.html"
                username-parameter="username"
                password-parameter="password"
                login-processing-url="/login.do"
                default-target-url="/index.html"
                authentication-failure-url="/fail.html"
        ></security:form-login>
        <!--跨域访问-->
        <security:csrf disabled="true"/>
    </security:http>


    <!--  认证管理器  -->
    <security:authentication-manager>
        <!--  认证信息提供者，认证信息的来源
              提供登陆用户信息  用户名、密码、权限集合
              user-service-ref 指向spring容器中一个bean对象, 实现这个UserDetailsService的对象, 提供用户的名称、密码、权限集合

              一旦配置了user-service-ref，就不要配置security:user-service
        -->
        <security:authentication-provider user-service-ref="securityUserService">
            <security:password-encoder ref="bCryptPasswordEncoder"></security:password-encoder>
        </security:authentication-provider>

    </security:authentication-manager>

    <bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
</beans>